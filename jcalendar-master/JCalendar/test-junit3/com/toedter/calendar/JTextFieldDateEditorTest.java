package com.toedter.calendar;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import junit.framework.TestCase;

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for
 * informations about the tool, the licence and the authors.
 */

public class JTextFieldDateEditorTest
// JUnitDoclet begin extends_implements
		extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	com.toedter.calendar.JTextFieldDateEditor jtextfielddateeditor = null;

	// JUnitDoclet end class

	public JTextFieldDateEditorTest(String name) {
		// JUnitDoclet begin method JTextFieldDateEditorTest
		super(name);
		// JUnitDoclet end method JTextFieldDateEditorTest
	}

	public com.toedter.calendar.JTextFieldDateEditor createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new com.toedter.calendar.JTextFieldDateEditor();
		// JUnitDoclet end method testcase.createInstance
	}

	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		jtextfielddateeditor = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		jtextfielddateeditor = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	public void testSetGetDate() throws Exception {
		// JUnitDoclet begin method setDate getDate
		Date[] tests = { new Date(), null };

		for (int i = 0; i < tests.length; i++) {
			jtextfielddateeditor.setDate(tests[i]);
			assertEquals(tests[i], jtextfielddateeditor.getDate());
		}
		// JUnitDoclet end method setDate getDate
	}

	public void testSetGetDateFormatString() throws Exception {
		// JUnitDoclet begin method setDateFormatString getDateFormatString
		String[] tests = { "dd.MM.yyyy",  "MM/dd/yy", new String() };

		for (int i = 0; i < tests.length; i++) {
			jtextfielddateeditor.setDateFormatString(tests[i]);
			assertEquals(tests[i], jtextfielddateeditor.getDateFormatString());
		}
		
		
		String[] tests2 = { null, "MM/xdd/yy" };
		String defaultFormat = ((SimpleDateFormat)DateFormat.getDateInstance(DateFormat.MEDIUM)).toPattern();
		
		for (int i = 0; i < tests2.length; i++) {
			jtextfielddateeditor.setDateFormatString(tests2[i]);
			assertEquals(defaultFormat, jtextfielddateeditor.getDateFormatString());
		}
		// JUnitDoclet end method setDateFormatString getDateFormatString
	}

	public void testGetUiComponent() throws Exception {
		// JUnitDoclet begin method getUiComponent
		// JUnitDoclet end method getUiComponent
	}

	public void testCaretUpdate() throws Exception {
		// JUnitDoclet begin method caretUpdate
		// JUnitDoclet end method caretUpdate
	}

	public void testFocusLost() throws Exception {
		// JUnitDoclet begin method focusLost
		// JUnitDoclet end method focusLost
	}

	public void testFocusGained() throws Exception {
		// JUnitDoclet begin method focusGained
		// JUnitDoclet end method focusGained
	}

	public void testSetLocale() throws Exception {
		// JUnitDoclet begin method setLocale
		// JUnitDoclet end method setLocale
	}

	public void testCreateMaskFromDatePattern() throws Exception {
		// JUnitDoclet begin method createMaskFromDatePattern
		// JUnitDoclet end method createMaskFromDatePattern
	}

	public void testSetIsMaskVisible() throws Exception {
		// JUnitDoclet begin method setMaskVisible isMaskVisible
		boolean[] tests = { true, false };

		for (int i = 0; i < tests.length; i++) {
			jtextfielddateeditor.setMaskVisible(tests[i]);
			assertEquals(tests[i], jtextfielddateeditor.isMaskVisible());
		}
		// JUnitDoclet end method setMaskVisible isMaskVisible
	}

	public void testGetPreferredSize() throws Exception {
		// JUnitDoclet begin method getPreferredSize
		// JUnitDoclet end method getPreferredSize
	}

	public void testActionPerformed() throws Exception {
		// JUnitDoclet begin method actionPerformed
		// JUnitDoclet end method actionPerformed
	}

	/**
	 * JUnitDoclet moves marker to this method, if there is not match for them
	 * in the regenerated code and if the marker is not empty. This way, no test
	 * gets lost when regenerating after renaming. Method testVault is supposed
	 * to be empty.
	 */
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

	public static void main(String[] args) {
		// JUnitDoclet begin method testcase.main
		junit.textui.TestRunner.run(JTextFieldDateEditorTest.class);
		// JUnitDoclet end method testcase.main
	}
}
