package com.toedter.calendar;

import java.awt.Color;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import junit.framework.TestCase;

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for
 * informations about the tool, the licence and the authors.
 */

public class JCalendarTest
// JUnitDoclet begin extends_implements
		extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	com.toedter.calendar.JCalendar jcalendar = null;

	// JUnitDoclet end class

	public JCalendarTest(String name) {
		// JUnitDoclet begin method JCalendarTest
		super(name);
		// JUnitDoclet end method JCalendarTest
	}

	public com.toedter.calendar.JCalendar createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new com.toedter.calendar.JCalendar();
		// JUnitDoclet end method testcase.createInstance
	}

	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		jcalendar = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		jcalendar = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	public void testMain() throws Exception {
		// JUnitDoclet begin method main
		// JUnitDoclet end method main
	}

	public void testGetDayChooser() throws Exception {
		// JUnitDoclet begin method getDayChooser
		// JUnitDoclet end method getDayChooser
	}

	public void testGetMonthChooser() throws Exception {
		// JUnitDoclet begin method getMonthChooser
		assertTrue(jcalendar.getMonthChooser() instanceof JMonthChooser);
		// JUnitDoclet end method getMonthChooser
	}

	public void testGetYearChooser() throws Exception {
		// JUnitDoclet begin method getYearChooser
		assertTrue(jcalendar.getYearChooser() instanceof JYearChooser);
		// JUnitDoclet end method getYearChooser
	}

	public void testPropertyChange() throws Exception {
		// JUnitDoclet begin method propertyChange
		// JUnitDoclet end method propertyChange
	}

	public void testSetBackground() throws Exception {
		// JUnitDoclet begin method setBackground
		// JUnitDoclet end method setBackground
	}

	public void testSetGetCalendar() throws Exception {
		// JUnitDoclet begin method setCalendar getCalendar
		Calendar[] tests = { Calendar.getInstance() };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setCalendar(tests[i]);
			assertEquals(tests[i], jcalendar.getCalendar());
		}

		try {
			jcalendar.setCalendar(null);
			fail("NullPointerException expected.");
		} catch (Exception e) {
			assertTrue(e instanceof NullPointerException);
		}

		// JUnitDoclet end method setCalendar getCalendar
	}

	public void testSetIsEnabled() throws Exception {
		// JUnitDoclet begin method setEnabled isEnabled
		boolean[] tests = { true, false };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setEnabled(tests[i]);
			assertEquals(tests[i], jcalendar.isEnabled());
		}
		// JUnitDoclet end method setEnabled isEnabled
	}

	public void testSetFont() throws Exception {
		// JUnitDoclet begin method setFont
		// JUnitDoclet end method setFont
	}

	public void testSetForeground() throws Exception {
		// JUnitDoclet begin method setForeground
		// JUnitDoclet end method setForeground
	}

	public void testSetGetLocale() throws Exception {
		// JUnitDoclet begin method setLocale getLocale
		Locale[] tests = { Locale.getDefault() };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setLocale(tests[i]);
			assertEquals(tests[i], jcalendar.getLocale());
		}

		try {
			jcalendar.setLocale(null);
			fail("NullPointerException expected.");
		} catch (Exception e) {
			assertTrue(e instanceof NullPointerException);
		}

		// JUnitDoclet end method setLocale getLocale
	}

	public void testSetIsWeekOfYearVisible() throws Exception {
		// JUnitDoclet begin method setWeekOfYearVisible isWeekOfYearVisible
		boolean[] tests = { true, false };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setWeekOfYearVisible(tests[i]);
			assertEquals(tests[i], jcalendar.isWeekOfYearVisible());
		}
		// JUnitDoclet end method setWeekOfYearVisible isWeekOfYearVisible
	}

	public void testSetIsDecorationBackgroundVisible() throws Exception {
		// JUnitDoclet begin method setDecorationBackgroundVisible
		// isDecorationBackgroundVisible
		boolean[] tests = { true, false };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setDecorationBackgroundVisible(tests[i]);
			assertEquals(tests[i], jcalendar.isDecorationBackgroundVisible());
		}
		// JUnitDoclet end method setDecorationBackgroundVisible
		// isDecorationBackgroundVisible
	}

	public void testSetIsDecorationBordersVisible() throws Exception {
		// JUnitDoclet begin method setDecorationBordersVisible
		// isDecorationBordersVisible
		boolean[] tests = { true, false };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setDecorationBordersVisible(tests[i]);
			assertEquals(tests[i], jcalendar.isDecorationBordersVisible());
		}
		// JUnitDoclet end method setDecorationBordersVisible
		// isDecorationBordersVisible
	}

	public void testSetGetDecorationBackgroundColor() throws Exception {
		// JUnitDoclet begin method setDecorationBackgroundColor
		// getDecorationBackgroundColor
		Color[] tests = { Color.GREEN, null };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setDecorationBackgroundColor(tests[i]);
			assertEquals(tests[i], jcalendar.getDecorationBackgroundColor());
		}
		// JUnitDoclet end method setDecorationBackgroundColor
		// getDecorationBackgroundColor
	}

	public void testSetGetSundayForeground() throws Exception {
		// JUnitDoclet begin method setSundayForeground getSundayForeground
		Color[] tests = { Color.RED, null };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setSundayForeground(tests[i]);
			assertEquals(tests[i], jcalendar.getSundayForeground());
		}
		// JUnitDoclet end method setSundayForeground getSundayForeground
	}

	public void testSetGetWeekdayForeground() throws Exception {
		// JUnitDoclet begin method setWeekdayForeground getWeekdayForeground
		Color[] tests = { Color.GRAY, null };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setWeekdayForeground(tests[i]);
			assertEquals(tests[i], jcalendar.getWeekdayForeground());
		}
		// JUnitDoclet end method setWeekdayForeground getWeekdayForeground
	}

	public void testSetGetDate() throws Exception {
		// JUnitDoclet begin method setDate getDate
		Date[] tests = { new Date() };

		for (int i = 0; i < tests.length; i++) {
			jcalendar.setDate(tests[i]);
			assertEquals(tests[i], jcalendar.getDate());
		}

		try {
			jcalendar.setDate(null);
			fail("NullPointerException expected.");
		} catch (Exception e) {
			assertTrue(e instanceof NullPointerException);
		}

		// JUnitDoclet end method setDate getDate
	}

	/**
	 * JUnitDoclet moves marker to this method, if there is not match for them
	 * in the regenerated code and if the marker is not empty. This way, no test
	 * gets lost when regenerating after renaming. Method testVault is supposed
	 * to be empty.
	 */
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

	public static void main(String[] args) {
		// JUnitDoclet begin method testcase.main
		junit.textui.TestRunner.run(JCalendarTest.class);
		// JUnitDoclet end method testcase.main
	}
}
