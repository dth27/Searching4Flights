package com.toedter.calendar;

import java.awt.Color;
import java.util.Locale;

import junit.framework.TestCase;

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class JDayChooserTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.toedter.calendar.JDayChooser jdaychooser = null;
  // JUnitDoclet end class
  
  public JDayChooserTest(String name) {
    // JUnitDoclet begin method JDayChooserTest
    super(name);
    // JUnitDoclet end method JDayChooserTest
  }
  
  public com.toedter.calendar.JDayChooser createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new com.toedter.calendar.JDayChooser();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    jdaychooser = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    jdaychooser = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testSetGetLocale() throws Exception {
    // JUnitDoclet begin method setLocale getLocale
    Locale[] tests = {Locale.getDefault()};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setLocale(tests[i]);
      assertEquals(tests[i], jdaychooser.getLocale());
    }
    
    try {
    	jdaychooser.setLocale(null);
    	fail("NullPointerException expected.");
    } catch(Exception e) {
    	assertTrue(e instanceof NullPointerException);
    }
    // JUnitDoclet end method setLocale getLocale
  }
  
  public void testSetGetDay() throws Exception {
    // JUnitDoclet begin method setDay getDay
	jdaychooser.setMonth(0);
    int[] tests = {Integer.MIN_VALUE, -1, 0, 1, 2, 5, 15, 29, 31, 32, 100, Integer.MAX_VALUE};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setDay(tests[i]);
      if(tests[i] < 1) {
    	  assertEquals(1, jdaychooser.getDay());
      } else if(tests[i] > 31) {
    	  assertEquals(31, jdaychooser.getDay());
      } else
      assertEquals(tests[i], jdaychooser.getDay());
    }
    // JUnitDoclet end method setDay getDay
  }
  
  public void testSetAlwaysFireDayProperty() throws Exception {
    // JUnitDoclet begin method setAlwaysFireDayProperty
    // JUnitDoclet end method setAlwaysFireDayProperty
  }
  
  public void testSetMonth() throws Exception {
    // JUnitDoclet begin method setMonth
    // JUnitDoclet end method setMonth
  }
  
  public void testSetYear() throws Exception {
    // JUnitDoclet begin method setYear
    // JUnitDoclet end method setYear
  }
  
  public void testSetCalendar() throws Exception {
    // JUnitDoclet begin method setCalendar
    // JUnitDoclet end method setCalendar
  }
  
  public void testSetFont() throws Exception {
    // JUnitDoclet begin method setFont
    // JUnitDoclet end method setFont
  }
  
  public void testSetForeground() throws Exception {
    // JUnitDoclet begin method setForeground
    // JUnitDoclet end method setForeground
  }
  
  public void testActionPerformed() throws Exception {
    // JUnitDoclet begin method actionPerformed
    // JUnitDoclet end method actionPerformed
  }
  
  public void testFocusGained() throws Exception {
    // JUnitDoclet begin method focusGained
    // JUnitDoclet end method focusGained
  }
  
  public void testFocusLost() throws Exception {
    // JUnitDoclet begin method focusLost
    // JUnitDoclet end method focusLost
  }
  
  public void testKeyPressed() throws Exception {
    // JUnitDoclet begin method keyPressed
    // JUnitDoclet end method keyPressed
  }
  
  public void testKeyTyped() throws Exception {
    // JUnitDoclet begin method keyTyped
    // JUnitDoclet end method keyTyped
  }
  
  public void testKeyReleased() throws Exception {
    // JUnitDoclet begin method keyReleased
    // JUnitDoclet end method keyReleased
  }
  
  public void testSetEnabled() throws Exception {
    // JUnitDoclet begin method setEnabled
    // JUnitDoclet end method setEnabled
  }
  
  public void testSetIsWeekOfYearVisible() throws Exception {
    // JUnitDoclet begin method setWeekOfYearVisible isWeekOfYearVisible
    boolean[] tests = {true, false};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setWeekOfYearVisible(tests[i]);
      assertEquals(tests[i], jdaychooser.isWeekOfYearVisible());
    }
    // JUnitDoclet end method setWeekOfYearVisible isWeekOfYearVisible
  }
  
  public void testGetDayPanel() throws Exception {
    // JUnitDoclet begin method getDayPanel
    // JUnitDoclet end method getDayPanel
  }
  
  public void testSetGetDecorationBackgroundColor() throws Exception {
    // JUnitDoclet begin method setDecorationBackgroundColor getDecorationBackgroundColor
    Color[] tests = {Color.GREEN, null};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setDecorationBackgroundColor(tests[i]);
      assertEquals(tests[i], jdaychooser.getDecorationBackgroundColor());
    }
    // JUnitDoclet end method setDecorationBackgroundColor getDecorationBackgroundColor
  }
  
  public void testSetGetSundayForeground() throws Exception {
    // JUnitDoclet begin method setSundayForeground getSundayForeground
    Color[] tests = {Color.RED, null};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setSundayForeground(tests[i]);
      assertEquals(tests[i], jdaychooser.getSundayForeground());
    }
    // JUnitDoclet end method setSundayForeground getSundayForeground
  }
  
  public void testSetGetWeekdayForeground() throws Exception {
    // JUnitDoclet begin method setWeekdayForeground getWeekdayForeground
    Color[] tests = {Color.GRAY, null};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setWeekdayForeground(tests[i]);
      assertEquals(tests[i], jdaychooser.getWeekdayForeground());
    }
    // JUnitDoclet end method setWeekdayForeground getWeekdayForeground
  }
  
  public void testSetFocus() throws Exception {
    // JUnitDoclet begin method setFocus
    // JUnitDoclet end method setFocus
  }
  
  public void testSetIsDecorationBackgroundVisible() throws Exception {
    // JUnitDoclet begin method setDecorationBackgroundVisible isDecorationBackgroundVisible
    boolean[] tests = {true, false};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setDecorationBackgroundVisible(tests[i]);
      assertEquals(tests[i], jdaychooser.isDecorationBackgroundVisible());
    }
    // JUnitDoclet end method setDecorationBackgroundVisible isDecorationBackgroundVisible
  }
  
  public void testSetIsDecorationBordersVisible() throws Exception {
    // JUnitDoclet begin method setDecorationBordersVisible isDecorationBordersVisible
    boolean[] tests = {true, false};
    
    for (int i = 0; i < tests.length; i++) {
      jdaychooser.setDecorationBordersVisible(tests[i]);
      assertEquals(tests[i], jdaychooser.isDecorationBordersVisible());
    }
    // JUnitDoclet end method setDecorationBordersVisible isDecorationBordersVisible
  }
  
  public void testMain() throws Exception {
    // JUnitDoclet begin method main
    // JUnitDoclet end method main
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(JDayChooserTest.class);
    // JUnitDoclet end method testcase.main
  }
}
